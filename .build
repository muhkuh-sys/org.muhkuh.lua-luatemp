#! /bin/bash
set -e

TARGET=$1

JONCHKI_VERSION=0.0.4.1
JONCHKI_VERBOSE=info

# Get the path to this script. Found here: https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PRJ_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


if [ "$TARGET" == "linux" ]; then
	# Check for all build dependencies.
	declare -a -r astrDeb=(
		"libudev-dev"
	)
	declare -a astrInstall=()
	for strDeb in "${astrDeb[@]}"
	do
		DPKG_STATUS=`dpkg-query -W -f='${Status}' ${strDeb} || echo 'unknown'`
		if [ "$DPKG_STATUS" != "install ok installed" ]; then
			astrInstall+=("${strDeb}")
		fi
	done
	if [ ${#astrInstall[@]} -gt 0 ]; then
		sudo apt-get update --assume-yes
		sudo apt-get install --assume-yes ${astrInstall[@]}
	fi

	CMAKE_CROSS_COMPILER=""
	CMAKE_PLATFORM=""
	JONCHKI_SYSTEM=""

elif [ "$TARGET" == "windows32" ]; then
	CMAKE_CROSS_COMPILER="-DCMAKE_TOOLCHAIN_FILE=${PRJ_DIR}/cmake/toolchainfiles/toolchain_windows_32.cmake"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=windows -DJONCHKI_PLATFORM_DIST_VERSION="" -DJONCHKI_PLATFORM_CPU_ARCH=x86"
	JONCHKI_SYSTEM="--distribution-id windows --empty-distribution-version --cpu-architecture x86"

elif [ "$TARGET" == "windows64" ]; then
	CMAKE_CROSS_COMPILER="-DCMAKE_TOOLCHAIN_FILE=${PRJ_DIR}/cmake/toolchainfiles/toolchain_windows_64.cmake"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=windows -DJONCHKI_PLATFORM_DIST_VERSION="" -DJONCHKI_PLATFORM_CPU_ARCH=x86_64"
	JONCHKI_SYSTEM="--distribution-id windows --empty-distribution-version --cpu-architecture x86_64"

elif [ "$TARGET" == "raspberry" ]; then
	# Download all build dependencies to a special folder.
	PKGBASE=${PRJ_DIR}/build/raspberry/packages
	mkdir -p ${PKGBASE}
	pushd ${PKGBASE}
	echo $PKGBASE
	${PRJ_DIR}/cmake/tools/get_dependencies.sh libacl1-dev:arm64
	popd

	CMAKE_CROSS_COMPILER="-DCMAKE_TOOLCHAIN_FILE=${PRJ_DIR}/cmake/toolchainfiles/toolchain_ubuntu_arm64.cmake"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=ubuntu -DJONCHKI_PLATFORM_DIST_VERSION=18.04 -DJONCHKI_PLATFORM_CPU_ARCH=arm64"
	JONCHKI_SYSTEM="--distribution-id ubuntu --distribution-version 18.04 --cpu-architecture arm64"

else
	echo "Unknown build target: ${TARGET}"
	exit -1
fi

BUILD_DIR=${PRJ_DIR}/build/${TARGET}
mkdir -p ${BUILD_DIR}
mkdir -p ${BUILD_DIR}/external
mkdir -p ${BUILD_DIR}/lua5.1/build_requirements
#mkdir -p ${BUILD_DIR}/lua5.2/build_requirements
#mkdir -p ${BUILD_DIR}/lua5.3/build_requirements


# Install jonchki.
python2.7 jonchki/jonchkihere.py --jonchki-version ${JONCHKI_VERSION} --local-archives ${PRJ_DIR}/jonchki/local_archives ${PRJ_DIR}/build
if [ -f ${PRJ_DIR}/build/.jonchki.cmd ]; then
	JONCHKI=$(<${PRJ_DIR}/build/.jonchki.cmd)
fi
if [ "${JONCHKI}" == "" ]; then
	echo "Failed to extract the jonchki command from the jonchkihere output."
	exit 1
fi

echo "***************Stopt by: Get build requirements"
# Get the build requirements for the LUA5.1 version and the externals.
pushd ${BUILD_DIR}/lua5.1/build_requirements
rm -f lua-tempsensor/lua5.1-tempsensor-*.xml
cmake -DBUILDCFG_ONLY_JONCHKI_CFG="ON" -DBUILDCFG_LUA_VERSION="5.1" -DCMAKE_INSTALL_PREFIX="" -DPRJ_DIR=${PRJ_DIR} ${CMAKE_CROSS_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
make
${JONCHKI} install-dependencies --verbose debug --syscfg ${PRJ_DIR}/jonchki/jonchkisys.cfg --prjcfg ${PRJ_DIR}/jonchki/jonchkicfg.xml ${JONCHKI_SYSTEM} --build-dependencies lua-tempsensor/lua5.1-tempsensor-*.xml
popd

echo "**************Stopt by: Build external components"
# Build the external components.
pushd ${BUILD_DIR}/external
cmake -DCMAKE_INSTALL_PREFIX="" -DPRJ_DIR=${PRJ_DIR} ${CMAKE_CROSS_COMPILER} ${PRJ_DIR}/external
make
make install
popd
# Get the additional CMAKE search paths.
CMAKE_PATHS="-DEXTERNAL_LIB_DIR=${BUILD_DIR}/external/install/lib -DEXTERNAL_INCLUDE_DIR=${BUILD_DIR}/external/install/include"

echo "************Stopt by: Build LUA%.1 Version"
# Build the LUA5.1 version.
pushd ${BUILD_DIR}/lua5.1
cmake -DBUILDCFG_LUA_USE_SYSTEM="OFF" -DBUILDCFG_LUA_VERSION="5.1" -DCMAKE_INSTALL_PREFIX="" -DPRJ_DIR=${PRJ_DIR} ${CMAKE_CROSS_COMPILER} ${CMAKE_PLATFORM} ${CMAKE_PATHS} ${PRJ_DIR}
make pack
popd
